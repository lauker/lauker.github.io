x = MeanOrgN,
y = MeanChla,
bf.message = FALSE
)
#if not already installed
install.packages("correlation")
library(correlation)
install.packages("correlation")
library(corrplot)
mat <- cor(qMRI)
corrplot(mat,
method = "square",
type = "upper")
install.packages("GGally")
library(GGally)
install.packages("ggcorrplot")
library(ggstatsplot)
library(ggcorrplot)
ggcorrmat(
data = qMRI,
type = "parametric", # parametric for Pearson, nonparametric for Spearman's correlation
colors = c("darkred", "white", "darkblue") #change default colors
)
Poverty_Indicators_by_COmmunity_Area <- read.csv("~/Dropbox/BIOSTATS/Poverty_Indicators_by_COmmunity_Area.csv")
View(Poverty_Indicators_by_COmmunity_Area)
poverty <- read.csv("~/Dropbox/BIOSTATS/Poverty_Indicators_by_COmmunity_Area.csv")
View(poverty)
ggcorrmat(
data = poverty,
type = "parametric", # parametric for Pearson, nonparametric for Spearman's correlation
colors = c("darkred", "white", "darkblue") #change default colors
)
parachi <- read.csv("~/Dropbox/BIOSTATS/parachi.csv")
View(parachi)
install.packages("ggplot2")
library(ggplot2)
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
install.packages("ggplot2")
glimpse(parachi)
#a matrix is required for a chi-square analysis. This code converts our dataframe into a matrix.
#"Please cross-tabulate the 'number' column of counts in the totals data frame by the 'Habitat' and 'morph_colour' variables.
para.mat<-xtabs(Number ~ Plant + Association.with.Bursage,
data = parachi)
para.mat
chisq.test(para.mat)
para.chi<-chisq.test(para.mat)
names(para.chi)
para.chi$observed
# Draw a mosaic plot for the variables
mosaicplot(~ Plant + Association.with.Bursage, data = para.mat,
main = "Species vs. Association", shade = TRUE)
a <- 4+5
b <- c(5, 8, 9)
c<- a*b
library(raster)
library(rgdal)
wd<-("/Users/lindaauker/Dropbox/GIS COURSE/R practice/")
setwd(wd)
# load raster in an R object called 'DEM'
DEM <- raster(paste0(wd,"/NEON-DS-Field-Site-Spatial-Data/SJER/DigitalTerrainModel/SJER2013_DTM.tif"))
# look at the raster attributes.
DEM
#calculate and save the min and max values of the raster to the raster object
DEM <- setMinMax(DEM)
#view raster attributes
DEM
#Get min and max cell values from raster
#Note: this code may fail if the raster is too large
cellStats(DEM, min)
cellStats(DEM, max)
cellStats(DEM, range)
#view coordinate reference system (CRS)
DEM@crs
#view raster extent
DEM@extent
#the distribution of values in the raster
hist(DEM, main = "Distribution of elevation values", col = "purple", maxpixels = 22000000)
#plot the raster
#note that this raster represents a small region of the NEON SJER field site
plot(DEM, main = "Digital Elevation Model, SJER") #add title with main
#create a plot of the raster
image(DEM)
#specify the range of values that you want to plot in the DEM
#just plot pixels between 250 and 300m in elevation
image(DEM, zlim=c(250,300))
#we can specify the colors too
col <- terrain.colors(5)
image(DEM, zlim=c(250, 375), main = "Digital Elevation Model (DEM)", col = col)
#add a color map with 5 colors
col = terrain.colors(5)
#add breaks to the color map (6 breaks = 5 segments)
brk <- c(250, 300, 350, 400, 450, 500)
plot(DEM, col = col, breaks = brk, main = "DEM with more breaks")
# First, expand right side of clipping rectangle to make room for the legend
# turn xpd off
par(xpd = FALSE, mar=c(5.1, 4.1, 4.1, 4.5))
# Second, plot w/ no legend
plot(DEM, col=col, breaks=brk, main="DEM with a Custom (but flipped) Legend", legend = FALSE)
# Third, turn xpd back on to force the legend to fit next to the plot.
par(xpd = TRUE)
# Fourth, add a legend - & make it appear outside of the plot
legend(par()$usr[2], 4110600,
legend = c("lowest", "a bit higher", "middle ground", "higher yet", "highest"),
fill = col)
# Expand right side of clipping rect to make room for the legend
par(xpd = FALSE,mar=c(5.1, 4.1, 4.1, 4.5))
#DEM with a custom legend
plot(DEM, col=col, breaks=brk, main="DEM with a Custom Legend",legend = FALSE)
#turn xpd back on to force the legend to fit next to the plot.
par(xpd = TRUE)
#add a legend - but make it appear outside of the plot
legend( par()$usr[2], 4110600,
legend = c("Highest", "Higher yet", "Middle","A bit higher", "Lowest"),
fill = rev(col))
#add a color map with 4 colors
col=terrain.colors(4)
#add breaks to the colormap (6 breaks = 5 segments)
brk <- c(200, 300, 350, 400,500)
plot(DEM, col=col, breaks=brk, main="DEM with fewer breaks")
#multiple each pixel in the raster by 2
DEM2 <- DEM * 2
DEM2
## class      : RasterLayer
## dimensions : 5060, 4299, 21752940  (nrow, ncol, ncell)
## resolution : 1, 1  (x, y)
## extent     : 254570, 258869, 4107302, 4112362  (xmin, xmax, ymin, ymax)
## crs        : +proj=utm +zone=11 +datum=WGS84 +units=m +no_defs
## source     : memory
## names      : SJER2013_DTM
## values     : 456.2, 1037.32  (min, max)
#plot the new DEM
plot(DEM2, main="DEM with all values doubled")
#define the crop extent
cropbox2 <-c(255077.3,257158.6,4109614,4110934)
#crop the raster
DEMcrop2 <- crop(DEM, cropbox2)
#plot cropped DEM
plot(DEMcrop2)
#crop the raster, then plot the new cropped raster
DEMcrop1 <- crop(DEM2, cropbox2)
#plot the cropped extent
plot(DEMcrop1)
# load raster in an R object called 'DSM'
DSM <- raster(paste0(wd,"/NEON-DS-Field-Site-Spatial-Data/SJER/DigitalSurfaceModel/SJER2013_DSM.tif"))
# look at the raster attributes.
DSM
DSMft<-DSM*3.3
DSMft
# the distribution of values in the raster
hist(DSMft, main="Distribution of elevation values",
col= "purple",
maxpixels=22000000)
#add a color map with 4 colors
col = terrain.colors(3)
#add breaks to the color map (4 breaks = 3 segments)
brk <- c(700,1050, 1450, 1800)
plot(DSMft, col = col, breaks = brk, main = "DSM custom map")
col <- terrain.colors(6)
#add breaks to the color map
brk <- c(855, 900, 1000, 1100, 1200, 1300, 1337)
plot(DEMID, col = col, breaks = brk, main = "DEM of Emida, ID")
# load raster in an R object called 'DEM'
DEMID <- raster(paste0(wd,"/emidalat/emidalat.tif"))
wd<-("/Users/lauker/Dropbox/GIS COURSE/Datasets for ENV 485/chap1")
setwd(wd)
wd<-("/Users/lindaauker/Dropbox/GIS COURSE/Datasets for ENV 485/chap1")
setwd(wd)
# load raster in an R object called 'DEM'
DEMID <- raster(paste0(wd,"/emidalat/emidalat.tif"))
# look at the raster attributes.
DEMID
col <- terrain.colors(6)
#add breaks to the color map
brk <- c(855, 900, 1000, 1100, 1200, 1300, 1337)
plot(DEMID, col = col, breaks = brk, main = "DEM of Emida, ID")
col <- terrain.colors(6)
#add breaks to the color map
brk <- c(855, 900, 1000, 1100, 1200, 1300, 1337)
plot(DEMID, col = col, breaks = brk, main = "DEM of Emida, ID")
terrain(DEMID, opt="slope", unit="degrees", neighbors=8, filename="EmidaSLOPE.tif", overwrite = TRUE)
#Stream shapefile
Emstream <- shapefile(paste0(wd,"/emidastrm.shp"))
Emslope <- raster(paste0(wd,"/emidalat/EmidaSLOPE.tif"))
# look at the raster attributes.
Emslope
col <- terrain.colors(10)
#add breaks to the color map
brk <- c(0, 1.72, 3.43, 5.71, 8.53, 11.3, 14.04, 16.7, 21.8, 32.0)
plot(Emslope, col = rev(col), breaks = brk, main = "Slope of Emida, ID")
#Overlay stream shapefile on slope
plot(Emstream, add = TRUE)
Forest.island_data <- read.delim("~/Dropbox/BIOSTATS/Forest-island_data.txt")
View(Forest.island_data)
#import Forest Island dataset
glimpse(Forest.island_data)
library(dplyr)
#import Forest Island dataset
glimpse(Forest.island_data)
#Create a boxplot of leaf area of plants  inside and outside tree islands
boxplot(LA_5leaves~inside_outside,
data = Forest.island_data,
names = c("in", "out"),
ylab = "Leaf Area")
#Create a boxplot of leaf dry matter content of plants  inside and outside tree islands
boxplot(LDMC~inside_outside,
data = Forest.island_data,
names = c("in", "out"),
ylab = "Leaf Dry Matter Content (g/cubic cm)")
#Conduct a Mann Whitney U-test
wilcox.test(LDMC~inside_outside,
data = Forest.island_data)
install.packages("coin")
library(coin)
independence_test(LDMC~inside_outside,
data = Forest.island_data)
independence_test(LDMC ~ inside_outside,
data = Forest.island_data)
hist(Forest.island_data$LDMC)
#Designate inside/outside as a categorical factor
Forest.island_data$inside_outside<-as.factor(Forest.island_data$inside_outside)
library("gmodels")
install.packages("gmodels")
library("gmodels")
library("car")
install.packages("car")
library("gmodels")
library("car")
library("DescTools")
install.packages("DescTools")
library("gmodels")
library("car")
library("DescTools")
library("ggplot2")
library("qqplotr")
install.packages("qqplotr")
library("gmodels")
library("car")
library("DescTools")
library("ggplot2")
library("qqplotr")
library("dplyr")
#Produce descriptive statistics by group
Forest.island_data %>% select(inside_outside, LDMC) %>% group_by(inside_outside) %>%
summarise(n = n(),
mean = mean(LDMC, na.rm = TRUE),
sd = sd(LDMC, na.rm = TRUE),
stderr = sd/sqrt(n),
LCL = mean - qt(1 - (0.05 / 2), n - 1) * stderr,
UCL = mean + qt(1 - (0.05 / 2), n - 1) * stderr,
median = median(LDMC, na.rm = TRUE),
min = min(LDMC, na.rm = TRUE),
max = max(LDMC, na.rm = TRUE),
IQR = IQR(LDMC, na.rm = TRUE),
LCLmed = MedianCI(LDMC, na.rm=TRUE)[2],
UCLmed = MedianCI(LDMC, na.rm=TRUE)[3])
#Produce Boxplots and visually check for outliers
ggplot(dat, aes(x = inside_outside, y = LDMC, fill = inside_outside)) +
stat_boxplot(geom ="errorbar", width = 0.5) +
geom_boxplot(fill = "light blue") +
stat_summary(fun.y=mean, geom="point", shape=10, size=3.5, color="black") +
ggtitle("Boxplot of inside and outside plots") +
theme_bw() + theme(legend.position="none")
#Produce Boxplots and visually check for outliers
ggplot(Forest.island_data, aes(x = inside_outside, y = LDMC, fill = inside_outside)) +
stat_boxplot(geom ="errorbar", width = 0.5) +
geom_boxplot(fill = "light blue") +
stat_summary(fun.y=mean, geom="point", shape=10, size=3.5, color="black") +
ggtitle("Boxplot of inside and outside plots") +
theme_bw() + theme(legend.position="none")
#Test each group for normality
Forest.island_data %>%
group_by(inside_outside) %>%
summarise(`W Stat` = shapiro.test(LDMC)$statistic,
p.value = shapiro.test(LDMC)$p.value)
#Perform QQ plots by group
ggplot(data = Forest.island_data, mapping = aes(sample = LDMC, color = inside_outside, fill = inside_outside)) +
stat_qq_band(alpha=0.5, conf=0.95, qtype=1, bandType = "boot") +
stat_qq_line(identity=TRUE) +
stat_qq_point(col="black") +
facet_wrap(~ inside_outside, scales = "free") +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") + theme_bw()
#Perform the Mann-Whitney U test
m1<-wilcox.test(LDMC ~ inside_outside, data=Forest.island_data, na.rm=TRUE, paired=FALSE, exact=FALSE, conf.int=TRUE)
print(m1)
#Hodges Lehmann Estimator
m1$estimate
#Now, load the libraries to unsure you have access to the functions.
library(tidyverse)
library(deSolve)
library(ggplot2)
#Part I
#Set parameters
pars<-c(alpha = 27.76, beta = 145.19, gamma = 0.95, delta = 1.80)
#Initial state (starting conditions) of the model. x = population at time 0 for DBM; y = population at time 0 for parasitoid
init<-c(x = 8.48, y = 1.38)
#Time step of model
times<-seq(0, 35, by = 1)
#Part II
deriv<-function(times, state, pars){ #define the name of the output as a variable called 'deriv'; set up inputs (time step, initial state, and parameters) which are previously defined in the
with(as.list(c(state, pars)),{  #This line of code states: “With the initial state and parameters input into this function, let’s calculate the following…”
d_x<-(alpha*x)-(beta*x*y)      #These two lines are the Lotka-Volterra equations you should recognize from the handout.
d_y<-(gamma*x*y)-(delta*y)
return(list(c(x=d_x, y=d_y))) # This basically means: “…and then return the results as a list of x and y variables in which x is the change in x over time and y is the change in y over time.”
})
}
#If you were to run this function now, you would actually not get anything as an output. Simply running a function that you have created just tells R that the function exists and what it does. You have to use the function as you would any other function in R. In this case, we are going to pass this newly created function as an argument in the “ode” function.
lv_results<-ode(init, times, deriv, pars) #This is the function from the deSolve package that actually solves the equations. What does the ode function do? According to Soetaert et al (2010), it simply solves ODE using the arguments of initial state values, time sequence, a function (in our case, that is the “deriv” function we defined in the previous lines of code, and a set of parameters).
#Part III
lv_results %>%
data.frame() %>%
gather(var, pop, -time) %>%
mutate(var = if_else(var == "x", "Prey", "Predator")) %>%
ggplot(aes(x = time, y = pop)) + #actual graphing code begins on this line (all of the code above is used to clean the code and create a more useful dataframe for graphing)
geom_line(aes(color = var)) +
labs(title = "Lotka-Volterra predator prey model",
subtitle = paste(names(pars), pars, sep = " = ", collapse = "; "),
x = "Time", y = "Population density")
#Part I
#Set parameters
pars<-c(alpha = 27.76, beta = 145.19, gamma = 0.95, delta = 1.80)
#Initial state (starting conditions) of the model. x = population at time 0 for DBM; y = population at time 0 for parasitoid
init<-c(x = 8.48, y = 0.15)
#Time step of model
times<-seq(0, 35, by = 1)
#Part II
deriv<-function(times, state, pars){ #define the name of the output as a variable called 'deriv'; set up inputs (time step, initial state, and parameters) which are previously defined in the
with(as.list(c(state, pars)),{  #This line of code states: “With the initial state and parameters input into this function, let’s calculate the following…”
d_x<-(alpha*x)-(beta*x*y)      #These two lines are the Lotka-Volterra equations you should recognize from the handout.
d_y<-(gamma*x*y)-(delta*y)
return(list(c(x=d_x, y=d_y))) # This basically means: “…and then return the results as a list of x and y variables in which x is the change in x over time and y is the change in y over time.”
})
}
#If you were to run this function now, you would actually not get anything as an output. Simply running a function that you have created just tells R that the function exists and what it does. You have to use the function as you would any other function in R. In this case, we are going to pass this newly created function as an argument in the “ode” function.
lv_results<-ode(init, times, deriv, pars) #This is the function from the deSolve package that actually solves the equations. What does the ode function do? According to Soetaert et al (2010), it simply solves ODE using the arguments of initial state values, time sequence, a function (in our case, that is the “deriv” function we defined in the previous lines of code, and a set of parameters).
#Part III
lv_results %>%
data.frame() %>%
gather(var, pop, -time) %>%
mutate(var = if_else(var == "x", "Prey", "Predator")) %>%
ggplot(aes(x = time, y = pop)) + #actual graphing code begins on this line (all of the code above is used to clean the code and create a more useful dataframe for graphing)
geom_line(aes(color = var)) +
labs(title = "Lotka-Volterra predator prey model",
subtitle = paste(names(pars), pars, sep = " = ", collapse = "; "),
x = "Time", y = "Population density")
#Part I
#Set parameters
pars<-c(alpha = 27.76, beta = 145.19, gamma = 0.95, delta = 1.80)
#Initial state (starting conditions) of the model. x = population at time 0 for DBM; y = population at time 0 for parasitoid
init<-c(x = 8.48, y = 0.75)
#Time step of model
times<-seq(0, 35, by = 1)
#Part II
deriv<-function(times, state, pars){ #define the name of the output as a variable called 'deriv'; set up inputs (time step, initial state, and parameters) which are previously defined in the
with(as.list(c(state, pars)),{  #This line of code states: “With the initial state and parameters input into this function, let’s calculate the following…”
d_x<-(alpha*x)-(beta*x*y)      #These two lines are the Lotka-Volterra equations you should recognize from the handout.
d_y<-(gamma*x*y)-(delta*y)
return(list(c(x=d_x, y=d_y))) # This basically means: “…and then return the results as a list of x and y variables in which x is the change in x over time and y is the change in y over time.”
})
}
#If you were to run this function now, you would actually not get anything as an output. Simply running a function that you have created just tells R that the function exists and what it does. You have to use the function as you would any other function in R. In this case, we are going to pass this newly created function as an argument in the “ode” function.
lv_results<-ode(init, times, deriv, pars) #This is the function from the deSolve package that actually solves the equations. What does the ode function do? According to Soetaert et al (2010), it simply solves ODE using the arguments of initial state values, time sequence, a function (in our case, that is the “deriv” function we defined in the previous lines of code, and a set of parameters).
#Part III
lv_results %>%
data.frame() %>%
gather(var, pop, -time) %>%
mutate(var = if_else(var == "x", "Prey", "Predator")) %>%
ggplot(aes(x = time, y = pop)) + #actual graphing code begins on this line (all of the code above is used to clean the code and create a more useful dataframe for graphing)
geom_line(aes(color = var)) +
labs(title = "Lotka-Volterra predator prey model",
subtitle = paste(names(pars), pars, sep = " = ", collapse = "; "),
x = "Time", y = "Population density")
#Part I
#Set parameters
pars<-c(alpha = 27.76, beta = 145.19, gamma = 0.95, delta = 1.80)
#Initial state (starting conditions) of the model. x = population at time 0 for DBM; y = population at time 0 for parasitoid
init<-c(x = 8.48, y = 0.30)
#Time step of model
times<-seq(0, 35, by = 1)
#Part II
deriv<-function(times, state, pars){ #define the name of the output as a variable called 'deriv'; set up inputs (time step, initial state, and parameters) which are previously defined in the
with(as.list(c(state, pars)),{  #This line of code states: “With the initial state and parameters input into this function, let’s calculate the following…”
d_x<-(alpha*x)-(beta*x*y)      #These two lines are the Lotka-Volterra equations you should recognize from the handout.
d_y<-(gamma*x*y)-(delta*y)
return(list(c(x=d_x, y=d_y))) # This basically means: “…and then return the results as a list of x and y variables in which x is the change in x over time and y is the change in y over time.”
})
}
#If you were to run this function now, you would actually not get anything as an output. Simply running a function that you have created just tells R that the function exists and what it does. You have to use the function as you would any other function in R. In this case, we are going to pass this newly created function as an argument in the “ode” function.
lv_results<-ode(init, times, deriv, pars) #This is the function from the deSolve package that actually solves the equations. What does the ode function do? According to Soetaert et al (2010), it simply solves ODE using the arguments of initial state values, time sequence, a function (in our case, that is the “deriv” function we defined in the previous lines of code, and a set of parameters).
#Part III
lv_results %>%
data.frame() %>%
gather(var, pop, -time) %>%
mutate(var = if_else(var == "x", "Prey", "Predator")) %>%
ggplot(aes(x = time, y = pop)) + #actual graphing code begins on this line (all of the code above is used to clean the code and create a more useful dataframe for graphing)
geom_line(aes(color = var)) +
labs(title = "Lotka-Volterra predator prey model",
subtitle = paste(names(pars), pars, sep = " = ", collapse = "; "),
x = "Time", y = "Population density")
joinedtosites %>% filter(state "Maine") %>% group_by(Year, SpeciesID) %>% tally()
joinedtosites %>% filter(state == "Maine") %>% group_by(Year, SpeciesID) %>% tally()
joinedtosites %>% filter(state == "Maine") %>% group_by(Year, SpeciesID) %>% count()
joinedtosites %>% filter(state == "Maine") %>% group_by(Year, SpeciesID) %>% n()
joinedtosites %>% filter(state == "Maine") %>% group_by(Year, SpeciesID) %>% summarise(count = n())
install.packages("tidyverse")
library(tidyverse)
joinedtosites %>% filter(state == "Maine") %>% group_by(Year, SpeciesID) %>% summarise(count = n())
occurrences = read_csv('occurrences.csv')
setwd("/Users/lindaauker/Documents/GitHub/lauker.github.io/docs")
occurrences = read_csv('occurrences.csv')
ascidians = read_csv('species.csv')
sites = read_csv('sites.csv') #import data
joinedtosites <- merge(x=occurrences, y=sites, by = "SITEID", all.x = TRUE)
joinedtosites %>% filter(state == "Maine") %>% group_by(Year, SpeciesID) %>% summarise(count = n())
setwd("/Users/lindaauker/Documents/GitHub/lauker.github.io/docs")
newyork<-joinedtosites%>%
filter(state == "New York") %>%
group_by(Year, SpeciesID) %>%
summarise(count = n())
ggplot(newyork, (aes(x = newyork$Year, fill = newyork$SpeciesID))) +
geom_bar(aes(y = count), position = "stack", stat="identity") +
xlab("Year") +
ylab("Number of Reported Occurrences")+
scale_fill_brewer(name = "Biofouling Species", labels = newyork$Genus)
occurrences = read_csv('occurrences.csv')
ascidians = read_csv('species.csv')
sites = read_csv('sites.csv') #import data
join1 <- merge(x=occurrences, y=sites, by = "SITEID", all.x = TRUE)
joinedtosites <-merge(x = join1, y = ascidians, by = "SpeciesID", all.x = TRUE)
View(joinedtosites)
View(joinedtosites)
newyork<-joinedtosites%>%
filter(state == "New York") %>%
group_by(Year, SpeciesID) %>%
summarise(count = n())
View(newyork)
ggplot(newyork, (aes(x = newyork$Year, fill = newyork$SpeciesID))) +
geom_bar(aes(y = count), position = "stack", stat="identity") +
xlab("Year") +
ylab("Number of Reported Occurrences")+
scale_fill_brewer(name = "Biofouling Species", labels = paste(sep = " ", ny$Genus, ny$Species))
ggplot(newyork, (aes(x = newyork$Year, fill = newyork$SpeciesID))) +
geom_bar(aes(y = count), position = "stack", stat="identity") +
xlab("Year") +
ylab("Number of Reported Occurrences")+
scale_fill_brewer(name = "Biofouling Species", labels = paste(sep = " ", newyork$Genus, newyork$Species))
ny<-filter(joinedtosites, state == "New York")
View(ny)
newyork<-joinedtosites%>%
filter(state == "New York") %>%
group_by(Year, Genus) %>%
summarise(count = n())
ggplot(newyork, (aes(x = newyork$Year, fill = newyork$Genus))) +
geom_bar(aes(y = count), position = "stack", stat="identity") +
xlab("Year") +
ylab("Number of Reported Occurrences")+
scale_fill_brewer("RdYlBu", name = "Biofouling Species")
newyork<-joinedtosites%>%
filter(state == "New York") %>%
group_by(Year, Genus) %>%
summarise(count = n())
ggplot(newyork, (aes(x = newyork$Year, fill = newyork$Genus))) +
geom_bar(aes(y = count), position = "stack", stat="identity") +
xlab("Year") +
ylab("Number of Reported Occurrences") +
scale_fill_brewer(palette = "RdYlBu", name = "Genus")
rhody<-joinedtosites%>%
filter(state == "Rhode Island") %>%
group_by(Year, Genus) %>%
summarise(count = n())
ggplot(rhody, (aes(x = rhody$Year, fill = rhody$Genus))) +
geom_bar(aes(y = count), position = "stack", stat="identity") +
xlab("Year") +
ylab("Number of Reported Occurrences") +
scale_fill_brewer(palette = "RdYlBu", name = "Genus")
conn<-joinedtosites%>%
filter(state == "Connecticut") %>%
group_by(Year, Genus) %>%
summarise(count = n())
ggplot(conn, (aes(x = conn$Year, fill = conn$Genus))) +
geom_bar(aes(y = count), position = "stack", stat="identity") +
xlab("Year") +
ylab("Number of Reported Occurrences") +
scale_fill_brewer(palette = "RdYlBu", name = "Genus")
maine<-joinedtosites%>%
filter(state == "Maine") %>%
group_by(Year, Genus) %>%
summarise(count = n())
ggplot(maine, (aes(x = Year, fill = maine$Genus))) +
geom_bar(aes(y = count), position = "stack", stat="identity") +
xlab("Year") +
ylab("Number of Reported Occurrences") +
scale_fill_brewer(palette = "RdYlBu", name = "Genus")
mass<-joinedtosites%>%
filter(state == "Massachusetts") %>%
group_by(Year, Genus) %>%
summarise(count = n())
ggplot(mass, (aes(x = Year, fill = mass$Genus))) +
geom_bar(aes(y = count), position = "stack", stat="identity") +
xlab("Year") +
ylab("Number of Reported Occurrences") +
scale_fill_brewer(palette = "RdYlBu", name = "Genus")
newhamp<-joinedtosites%>%
filter(state == "New Hampshire") %>%
group_by(Year, Genus) %>%
summarise(count = n())
ggplot(nh, (aes(x = Year, fill = newhamp$Genus))) +
geom_bar(aes(y = count), position = "stack", stat="identity") +
xlab("Year") +
ylab("Number of Reported Occurrences") +
scale_fill_brewer(palette = "RdYlBu", name = "Genus")
